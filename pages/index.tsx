import { ConnectButton } from '@rainbow-me/rainbowkit';
import { getAccount } from '@wagmi/core';
import type { NextPage } from 'next';
import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import { networkConfig } from '../components/networkConfig' 

import styles from '../styles/Home.module.css';

import { useAccount, useBalance } from 'wagmi';
import { isAddress } from 'viem';

const Home: NextPage = () => {

  const [theaddress, setTheAddress] = useState('');
  const [addresses, setAddresses] = useState([] as string[]);

  const { address } = useAccount(networkConfig);

  //create a function to get the balance of an address
  const getAddressBalance = async (address: string) => {
    const balance = useBalance(networkConfig, address);
    return balance;
  };

  useEffect(() => {
    if (localStorage?.getItem('evmAT')) {
      const result: any = JSON.parse(localStorage.getItem('evmAT') ?? '');
      if (result && address) {
          const filtered = result[address].filter((add: string) => add !== '');
          setAddresses(filtered);
      }
      console.log('result', result, address);
      console.log('addresses', addresses);
    }
  }, [address]);

  const handleSubmit = (e: React.FormEvent) => {
    var tempAddress = theaddress;
    e.preventDefault();
    if (!isAddress(theaddress)) {
      alert('Invalid address');
      return;
    }
    if (theaddress.trim() !== '') {
      setTheAddress('');
    }

    // Add Address
    if (localStorage?.getItem('evmAT')) {
      // get string array from local storage with key 'evmAT'
      const oldPayload = JSON.parse(localStorage.getItem('evmAT') as string);;
      console.log('view old payload ', oldPayload[address], addresses);
      oldPayload[address] = [...oldPayload[address], tempAddress];
      localStorage.setItem('evmAT', JSON.stringify(oldPayload));
      setAddresses([...addresses, tempAddress] as string[] | never[]); // Fix: Provide type annotation for addressList
    } else {
      console.log('adding new newAddress', tempAddress);
      const newItem: { [key: string]: string[] } = {}; // Fix: Add type annotation for newItem
      newItem[address] = [tempAddress];
      localStorage.setItem('evmAT', JSON.stringify(newItem));
      setAddresses([tempAddress] as string[] | never[]); // Fix: Provide type annotation for addressList
    }
    console.log('newAddress', tempAddress);
  };
  

  //remove address from address list
  const handleDelete = (index: number) => {
    const newAddresses = addresses.filter((_, i) => i !== index);
    setAddresses(newAddresses);
    const result: any = JSON.parse(localStorage.getItem('evmAT') ?? '');
    result[address] = newAddresses;
    localStorage.setItem('evmAT', JSON.stringify(result));
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />
        <br/>
        <br/>
        <br/>
        {/* Address input form */}
        <div className={styles.grid}>
          <form onSubmit={handleSubmit}>
            <input
              type="text"
              value={theaddress}
              onChange={(e) => setTheAddress(e.target.value)}
              placeholder="Enter Ethereum address"
              className={styles.input}
            />
            <button type="submit">Add Address</button>
          </form>
        </div>

        {/* Address list */}
        
        {/*
          {JSON.stringify(addresses)}
        */}
        
        <ul>
        {addresses.map((address, index) => (
          <li key={index}>
            {address}
            <span class="isValid">
            {isAddress(address) ? (
              <span className="valid-address">Valid</span>
            ) : (
              <span className="invalid-address">Invalid</span>
            )}
            </span>
            
            <button onClick={() => handleDelete(index)}>Delete</button>
            </li>
        ))}
      </ul>

      </main>

    </div>
  );
};

export default Home;
